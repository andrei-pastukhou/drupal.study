<?php
/**
 * @file training2.module
 */


/**
 * ======================TASK2_1===============================================
 */
/**
 * Implements hook_block_info().
 */
function training2_block_info() {
  $blocks['training2_currency'] = array(
    'info' => t('Block with currency of BNB'),
    'cache' => DRUPAL_CACHE_GLOBAL,
  );
  return $blocks;
}

/**
 * Implements hook_block_configure().
 */
function training2_block_configure() {
  $settings = variable_get('training2_settings');
  $currency_names =  array(); // Variable to generate checkboxes.
  $form = array(); // Array to custom block configure menu.
  // Load cache.
  $currency_cache = _training2_load_from_cache('training2_currency');
  // Prepare array for use to generate chekboxes.
  foreach ($currency_cache->data as $num_code => $val_ar) {
    $currency_names[$num_code] = $val_ar['CharCode'];
  }
  $form['training2_currency_update_time'] = array(
    '#type'	=> 'textfield',
    '#title' => t('Update every ... sec'),
    '#default_value' => $settings['training2_currency_update_time'],
  );
  $form['training2_currency']['currency_checked'] = array(
    '#type' => 'checkboxes',
    '#options' => $currency_names,
    '#title' => t('Check necessary currency to show'),
    '#default_value' => $settings['currency_checked'],
    );
  return $form;
}

/**
 * Implements hook_block_save().
 */
function training2_block_save($delta = '', $edit = array()) {

  $settings = array(
    'training2_currency_update_time' => $edit['training2_currency_update_time'],
    'currency_checked' => $edit['currency_checked'],
  );
  variable_set('training2_settings', $settings);
}

/**
 * Implements hook_block_view().
 */
function training2_block_view() {
  // Take necessary information from cache.
  $currency = _training2_load_from_cache('training2_currency');
  // Take settings.
  $settings = variable_get('training2_settings');;
  // Header of table.
  $header_table = array(
    t('Currency'),
    t('Rate'),
  );
  // Html attributes for every row.
  $row_attributes = array(
    'class' => array('rowClass'),
    'no_striping' => FAlSE,
  );
  // Create and fill information to row of table.
  $rows_table = array();
  foreach ($settings['currency_checked'] as $key => $value) {

    if (! empty($value)) {
      $rows_table[] = array(
        'data' => array(
          $currency->data[$key]['CharCode'],
          $currency->data[$key]['Rate'],
        ),
      ) + $row_attributes;
    }
  }
  // Create array of necessary information to use theme('table').
  $data = array();
  $data['subject'] = t('Currency of BNB');
  $data['content'] = theme('table',array(
    'caption' => t('currency last updated @data_time', array(
        '@data_time' => format_date($currency->created, 'short'),
      )
    ),
    'attributes' => array('id' => 'table-test'),
    'header' => $header_table,
    'rows' => $rows_table,
    )
  );
  return $data;
}

/**
 * Implements hook_install().
 */
function training2_install() {
  // Default settings if not change any time.
  $default_setting = array(
    // Default time to update cache.
    'training2_currency_update_time' => 60,
    // Default numcode to show rates. Use next syntax 'numcode' => 'numcode' to enable,
    // 'numcode' => 0 to disable.
    'currency_checked' => array('978' => '978', '643' => '643', '840' => '840'),
  );
  variable_set('training2_settings', $default_setting);
}

/**
 * Implements hook_uninstall().
 */
function training2_uninstall() {
  variable_del('training2_settings');
}

/**
 * @return bool
 * Function to load XML file from http://www.nbrb.by/Services/XmlExRates.aspx
 * and prepare this information to use.
 * Function put to cash 2 arrays, one of them consist names of currency,
 * second consist rate. In each array key is number of currency (take from xml file,
 * and this number is uniq for each currency)
 */
function _training2_update_cache_variable() {
  $currency_ar = array();
  $settings = variable_get('training2_settings');
  $url = 'http://www.nbrb.by/Services/XmlExRates.aspx';
  // Load XML File.
  $result = drupal_http_request($url);
  if ($result->status_message == 'OK') {
    $kursi_xml = simplexml_load_string($result->data);
    // Prepare array to put its to cache.
    foreach ($kursi_xml->Currency as $Currency) {
      $currency_ar[(int) $Currency->NumCode] = array(
        'CharCode' => (string) $Currency->CharCode,
        'Rate' => (float) $Currency->Rate,
      );
    }
  }
  else {
    drupal_set_message(
      t('Error to connect to @url with message @err',
        array(
          '@err' => $result->status_message,
          '@url' => $url,
        )
      ), 'error');
    return FALSE;
  }
  cache_set('training2_currency', $currency_ar, 'cache', REQUEST_TIME + (int) $settings['training2_currency_update_time']);
  return TRUE;
}

/**
 * @return array/bool
 * Function return cache variable. If cache variable don't exist than try to define it,
 * if can't return FALSE.
 */
function _training2_load_from_cache() {
  $cache = cache_get('training2_currency', 'cache');// Try to load cache.
  // Check is cache already exist and check lifetime of cache.
  if (empty($cache) || ($cache->expire < REQUEST_TIME)) {
    if (_training2_update_cache_variable()) {
      $cache = cache_get('training2_currency', 'cache');
    }
    else {
      drupal_set_message(t('there is an error, reload page!'), 'error');
      return FALSE;
    }
  }
  return $cache;
}


/**
 * ========================TASK2.2==============================================
 */

/**
 * Implements hook_form_alter().
 */
function training2_form_user_login_block_alter(&$form, &$form_state, $form_id) {
  // Settings of token auth.
  $user_to_login = array(
    'uid' => 1, // User's ID to auth.
    'token' => 'sim', // Token to auth without login and pass.
  );
  $form['secret_key'] = array(
    '#type' => 'textfield',
    '#title' => t('secret key'),
    '#size' => 15,
    '#suffix' => t('To enter use <strong>@token</strong>', array(
        '@token' => $user_to_login['token'],
      )
    ),
  );
  if (!empty($form_state['input']['secret_key']) && ($form_state['input']['secret_key'] == $user_to_login['token'])) {
    // Also can use next code:
    // global $user;
    // $user =  load_user(1);
    // user_login_finalize($user);
    user_login_submit(array(), $user_to_login);
    drupal_goto(current_path(), array('query' => drupal_get_query_parameters()));
  }
}

